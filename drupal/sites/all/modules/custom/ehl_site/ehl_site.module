<?php
/**
 * @file
 * Code for the ehl_site feature.
 */

include_once 'ehl_site.features.inc';

/**
 * hook_menu_alter
 */
function ehl_site_menu_alter(&$items) {
    // Change user tab
    $items['user/%user/edit']['type'] = MENU_CALLBACK;
    $items['user/%user/view']['title'] = "Profile";
    $items['user/%user/view']['weight'] = 10;
}

/**
 * hook_block_info
 */
function ehl_site_block_info() {
  // This example comes from node.module.
  $blocks['ehl_site_user_menu'] = array(
    'info' => t('EHL User menu'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * admin_paths_alter
 */ 
function ehl_site_admin_paths_alter(&$paths) {
    // Treat all user pages as NOT administrative.
    $paths['user/*'] = FALSE;
}

/**
 * hook_block_view
 */
function ehl_site_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'ehl_site_user_menu':
      $block['subject'] = FALSE;
      $block['content'] = ehl_site_user_menu_content();
      break;
  }
  return $block;
}

function ehl_site_user_menu_content(){
	global $user;
	$content = '';
	$content .= '
    <ul class="nav">
      <li class="divider-vertical"></li>';
	if($user->uid) {
    // Get the user image
    $user_picture_file_path = ''; // TODO get a default
    if (is_numeric($user->picture)) {
        $user_picture = file_load($user->picture);
    }
    if (!empty($user_picture->uri)) {
        $user_picture_file_path = file_create_url($user_picture->uri);
    }
    // Create the drop down structure
    $content .= '';
    $content .=  '
    <li class="dropdown">
      <a data-toggle="dropdown" class="dropdown-toggle" href="#"><img width="20" src="' . $user_picture_file_path . '">&nbsp; ' . truncate_utf8($user->name,15,false,true) .' <b class="caret"></b></a>
      <ul class="dropdown-menu">
        <li class="">
          ' . l('My project','user/' . $user->uid .'/project') . '
        </li>
        <li class="">
          ' . l('My posts','user/' . $user->uid .'/posts') . '
        </li>
        <li class="">
          ' . l('My profile','user/' . $user->uid) . '
        </li>

        <li class="divider"></li>
                <li class="">
          ' . l('Preferences','user/' . $user->uid .'/edit') . '
        </li>
        <li>' . l('Logout','user/logout') . '</li>
      </ul>
    </li>';

	} else {
		$content .= '<li>' . l('Login','user') . '</li>';
	}
	$content .= '<li class="divider-vertical">';
  $content .= '</li></ul>';
    $content .= '<a href="' . url('node/add/post') . '"class="btn btn-primary  btn-small">Add a post</a>';


	return array('#markup' => $content);
}

/**
 * hook_node_presave
 */
function ehl_site_node_presave($node) {
  if($node->type == 'post') {
    // Cute the title to make it shorter
    $node->title = substr($node->title, 0, 20);
  }
}

function ehl_site_preprocess_node(&$vars) {
  if($vars['node']->type == 'project'){
    $vars['node_url'] = url('user/' . $vars['node']->uid . '/project');
  }
}

/**
 * hook_views_pre_render
 */
function ehl_site_views_pre_render(&$view){
  if($view->name == 'my_project' && empty($view->result)){
    // if the current user is on is own project page
    global $user;
    if($user->uid == $view->args[0]){
      $view->empty['area']->options['content'] = "<h3>:( You didn't create a project. " . l('Create one', 'node/add/project') . " now.</h3>";
    }
  } 
}



/**
 * hook_form_FORM_ID_alter
 *
 * Generate the select to filter by school
 */
function ehl_site_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $nid_options = ehl_site_universities_form_options();
  $form['univeristy'] = array (
    '#type'           => 'select',
    '#multiple'       => false,
    '#required'       => false,
    '#options'        => $nid_options,
    '#default_value'  => '',
  ); 
  
  $form['#attributes'] = array('class' => array('pull-right'));
  unset($form['#info']['filter-nid']['label']);

}


function ehl_site_universities_form_options(){
  $options = array('' => t('All Univeristies'));
  $result = db_query("SELECT nid, title FROM {node} WHERE type = :type ORDER BY title LIMIT 50",
    array(
      ':type' => 'school',
    )
  );
  foreach($result as $record) {
    $options[$record->nid] = $record->title;
  }
  return $options;
}

/**
 * hook_user_view
 */
function ehl_site_user_view($account){
  // Load the school slug
  $account->field_school_field_slug = ehl_site_get_school_slug($account);
}

/**
 * hook_node_view
 */
function ehl_site_node_view($node, $view_mode, $langcode){
  if($node->type == 'post'){
    $account = user_load($node->uid);
    $node->school_slug = ehl_site_get_school_slug($account);
    $node->school_nid = ehl_site_get_school_nid($account);
  }
}

/**
 * Get the school slug of a user
 *
 * @argument uid int 
 */
function ehl_site_get_school_slug($account){
    $result = false;
    $field_school = field_get_items('user', $account, 'field_school');
    if(!empty($field_school)){
      $school = node_load($field_school[0]['target_id']);
      $field_school_fields_slug = field_get_items('node', $school,'field_slug');
      $result = $field_school_fields_slug[0]['safe_value'];
    }

    return $result;
}

/**
 * Get the school nid of a user
 *
 * @argument uid int 
 */
function ehl_site_get_school_nid($account){
    $result = false;
    $field_school = field_get_items('user', $account, 'field_school');
    if(!empty($field_school)){
      $result = $field_school[0]['target_id'];
    }

    return $result;
}


/**
 * Implements hook_module_implements_alter().
 */
function ehl_site_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'library_alter') {
    // Move jquery update to the end. This will make sure our hook_library_alter
    // is always called before the jquery_update.
    if(isset($implementations['jquery_update'])) { 
      $jquery_update = $implementations['jquery_update'];
      unset($implementations['jquery_update']);
      $implementations['jquery_update'] = $jquery_update;
    }
  }
}

/**
 * Implements hook_library_alter().
 */
function ehl_site_library_alter(&$libraries, $module) {
  // If it is the admin theme all we want to do is change the global $conf
  // variable so when jquery_update runs right after us it will use 1.5.
  // We are not using path_is_admin(current_path()) because some admin path can use
  // the frontend theme like node edit page
  global $theme_key;
  if (variable_get('admin_theme') == $theme_key) {
    // Modifying global $conf variable, can be dangerous. Be carefull.
    global $conf;
    $conf['jquery_update_jquery_version'] = '1.5';
  }
}